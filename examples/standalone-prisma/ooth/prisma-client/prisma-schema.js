module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateUser {
  count: Int!
}

type AggregateUserMeta {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserMeta(data: UserMetaCreateInput!): UserMeta!
  updateUserMeta(data: UserMetaUpdateInput!, where: UserMetaWhereUniqueInput!): UserMeta
  updateManyUserMetas(data: UserMetaUpdateManyMutationInput!, where: UserMetaWhereInput): BatchPayload!
  upsertUserMeta(where: UserMetaWhereUniqueInput!, create: UserMetaCreateInput!, update: UserMetaUpdateInput!): UserMeta!
  deleteUserMeta(where: UserMetaWhereUniqueInput!): UserMeta
  deleteManyUserMetas(where: UserMetaWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userMeta(where: UserMetaWhereUniqueInput!): UserMeta
  userMetas(where: UserMetaWhereInput, orderBy: UserMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserMeta]!
  userMetasConnection(where: UserMetaWhereInput, orderBy: UserMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserMetaConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userMeta(where: UserMetaSubscriptionWhereInput): UserMetaSubscriptionPayload
}

type User {
  id: ID!
  email: String
  username: String
  password: String
  verificationToken: String
  verificationTokenExpiresAt: DateTime
  userMeta(where: UserMetaWhereInput, orderBy: UserMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserMeta!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String
  username: String
  password: String
  verificationToken: String
  verificationTokenExpiresAt: DateTime
  userMeta: UserMetaCreateManyWithoutUserInput
}

input UserCreateOneWithoutUserMetaInput {
  create: UserCreateWithoutUserMetaInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutUserMetaInput {
  email: String
  username: String
  password: String
  verificationToken: String
  verificationTokenExpiresAt: DateTime
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserMeta {
  id: ID!
  key: String!
  value: String
  user: User
  child(where: UserMetaWhereInput, orderBy: UserMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserMeta!]
}

type UserMetaConnection {
  pageInfo: PageInfo!
  edges: [UserMetaEdge]!
  aggregate: AggregateUserMeta!
}

input UserMetaCreateInput {
  key: String!
  value: String
  user: UserCreateOneWithoutUserMetaInput
  child: UserMetaCreateManyInput
}

input UserMetaCreateManyInput {
  create: [UserMetaCreateInput!]
  connect: [UserMetaWhereUniqueInput!]
}

input UserMetaCreateManyWithoutUserInput {
  create: [UserMetaCreateWithoutUserInput!]
  connect: [UserMetaWhereUniqueInput!]
}

input UserMetaCreateWithoutUserInput {
  key: String!
  value: String
  child: UserMetaCreateManyInput
}

type UserMetaEdge {
  node: UserMeta!
  cursor: String!
}

enum UserMetaOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserMetaPreviousValues {
  id: ID!
  key: String!
  value: String
}

input UserMetaScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [UserMetaScalarWhereInput!]
  OR: [UserMetaScalarWhereInput!]
  NOT: [UserMetaScalarWhereInput!]
}

type UserMetaSubscriptionPayload {
  mutation: MutationType!
  node: UserMeta
  updatedFields: [String!]
  previousValues: UserMetaPreviousValues
}

input UserMetaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserMetaWhereInput
  AND: [UserMetaSubscriptionWhereInput!]
  OR: [UserMetaSubscriptionWhereInput!]
  NOT: [UserMetaSubscriptionWhereInput!]
}

input UserMetaUpdateDataInput {
  key: String
  value: String
  user: UserUpdateOneWithoutUserMetaInput
  child: UserMetaUpdateManyInput
}

input UserMetaUpdateInput {
  key: String
  value: String
  user: UserUpdateOneWithoutUserMetaInput
  child: UserMetaUpdateManyInput
}

input UserMetaUpdateManyDataInput {
  key: String
  value: String
}

input UserMetaUpdateManyInput {
  create: [UserMetaCreateInput!]
  update: [UserMetaUpdateWithWhereUniqueNestedInput!]
  upsert: [UserMetaUpsertWithWhereUniqueNestedInput!]
  delete: [UserMetaWhereUniqueInput!]
  connect: [UserMetaWhereUniqueInput!]
  set: [UserMetaWhereUniqueInput!]
  disconnect: [UserMetaWhereUniqueInput!]
  deleteMany: [UserMetaScalarWhereInput!]
  updateMany: [UserMetaUpdateManyWithWhereNestedInput!]
}

input UserMetaUpdateManyMutationInput {
  key: String
  value: String
}

input UserMetaUpdateManyWithoutUserInput {
  create: [UserMetaCreateWithoutUserInput!]
  delete: [UserMetaWhereUniqueInput!]
  connect: [UserMetaWhereUniqueInput!]
  set: [UserMetaWhereUniqueInput!]
  disconnect: [UserMetaWhereUniqueInput!]
  update: [UserMetaUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UserMetaUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UserMetaScalarWhereInput!]
  updateMany: [UserMetaUpdateManyWithWhereNestedInput!]
}

input UserMetaUpdateManyWithWhereNestedInput {
  where: UserMetaScalarWhereInput!
  data: UserMetaUpdateManyDataInput!
}

input UserMetaUpdateWithoutUserDataInput {
  key: String
  value: String
  child: UserMetaUpdateManyInput
}

input UserMetaUpdateWithWhereUniqueNestedInput {
  where: UserMetaWhereUniqueInput!
  data: UserMetaUpdateDataInput!
}

input UserMetaUpdateWithWhereUniqueWithoutUserInput {
  where: UserMetaWhereUniqueInput!
  data: UserMetaUpdateWithoutUserDataInput!
}

input UserMetaUpsertWithWhereUniqueNestedInput {
  where: UserMetaWhereUniqueInput!
  update: UserMetaUpdateDataInput!
  create: UserMetaCreateInput!
}

input UserMetaUpsertWithWhereUniqueWithoutUserInput {
  where: UserMetaWhereUniqueInput!
  update: UserMetaUpdateWithoutUserDataInput!
  create: UserMetaCreateWithoutUserInput!
}

input UserMetaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  user: UserWhereInput
  child_every: UserMetaWhereInput
  child_some: UserMetaWhereInput
  child_none: UserMetaWhereInput
  AND: [UserMetaWhereInput!]
  OR: [UserMetaWhereInput!]
  NOT: [UserMetaWhereInput!]
}

input UserMetaWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  verificationToken_ASC
  verificationToken_DESC
  verificationTokenExpiresAt_ASC
  verificationTokenExpiresAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  username: String
  password: String
  verificationToken: String
  verificationTokenExpiresAt: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  username: String
  password: String
  verificationToken: String
  verificationTokenExpiresAt: DateTime
  userMeta: UserMetaUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  username: String
  password: String
  verificationToken: String
  verificationTokenExpiresAt: DateTime
}

input UserUpdateOneWithoutUserMetaInput {
  create: UserCreateWithoutUserMetaInput
  update: UserUpdateWithoutUserMetaDataInput
  upsert: UserUpsertWithoutUserMetaInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutUserMetaDataInput {
  email: String
  username: String
  password: String
  verificationToken: String
  verificationTokenExpiresAt: DateTime
}

input UserUpsertWithoutUserMetaInput {
  update: UserUpdateWithoutUserMetaDataInput!
  create: UserCreateWithoutUserMetaInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  verificationToken: String
  verificationToken_not: String
  verificationToken_in: [String!]
  verificationToken_not_in: [String!]
  verificationToken_lt: String
  verificationToken_lte: String
  verificationToken_gt: String
  verificationToken_gte: String
  verificationToken_contains: String
  verificationToken_not_contains: String
  verificationToken_starts_with: String
  verificationToken_not_starts_with: String
  verificationToken_ends_with: String
  verificationToken_not_ends_with: String
  verificationTokenExpiresAt: DateTime
  verificationTokenExpiresAt_not: DateTime
  verificationTokenExpiresAt_in: [DateTime!]
  verificationTokenExpiresAt_not_in: [DateTime!]
  verificationTokenExpiresAt_lt: DateTime
  verificationTokenExpiresAt_lte: DateTime
  verificationTokenExpiresAt_gt: DateTime
  verificationTokenExpiresAt_gte: DateTime
  userMeta_every: UserMetaWhereInput
  userMeta_some: UserMetaWhereInput
  userMeta_none: UserMetaWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
`
      }
    